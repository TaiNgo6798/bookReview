{"version":3,"sources":["pages/login/forgot-form.js","pages/login/register-form.js","pages/login/index.js"],"names":["WrappedNormalForm","create","name","props","onCancel","visible","forgotEmailRef","useRef","getFieldDecorator","form","forgotHandler","e","preventDefault","axios","method","url","data","email","current","state","value","then","res","success","Swal","fire","position","type","title","showConfirmButton","footer","width","className","onSubmit","Item","rules","required","message","pattern","ref","size","onKeyDown","key","enterHandler","block","onClick","withRouter","RegistrationForm","confirmDirty","autoCompleteResult","loading","handleSubmit","validateFieldsAndScroll","err","values","setState","password","timer","history","push","handleConfirmBlur","target","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","validateFields","force","handleWebsiteChange","map","domain","this","spinning","labelCol","xs","span","sm","wrapperCol","label","hasFeedback","validator","Password","onBlur","htmlType","backLogin","React","Component","WrappedRegistrationForm","WrappedNormalLoginForm","emailRef","passwordRef","useState","forgotForm","setForgotForm","isLogin","setIsLogin","style","display","textAlign","prefix","color","placeholder","valuePropName","initialValue"],"mappings":"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","file":"static/js/6.d632dba8.chunk.js","sourcesContent":["\r\nimport React, { useRef, useState } from 'react'\r\nimport { Form, Input, Button, Modal } from 'antd'\r\nimport Swal from 'sweetalert2'\r\nimport { withRouter } from 'react-router-dom'\r\nimport axios from 'axios'\r\n\r\n\r\n// import css\r\nimport './index.scss'\r\n\r\n\r\nconst Index = (props) => {\r\n\r\n  const { onCancel, visible } = props\r\n\r\n  const forgotEmailRef = useRef(null)\r\n\r\n  const { getFieldDecorator } = props.form\r\n\r\n  const forgotHandler = (e) => {\r\n    e.preventDefault()\r\n    axios({\r\n      method: 'post',\r\n      url: 'http://localhost:8080/reviewbook/forgot',\r\n      data: {\r\n        email: forgotEmailRef.current.state.value\r\n      }\r\n    }).then(res => {\r\n      if (res.data.success) {\r\n        onCancel()\r\n        Swal.fire({\r\n          position: 'center',\r\n          type: 'success',\r\n          title: 'Please check your email to reset your password !',\r\n          showConfirmButton: true,\r\n        })\r\n      } else {\r\n        Swal.fire({\r\n          position: 'center',\r\n          type: 'error',\r\n          title: 'Email is not registered, please check again !',\r\n          showConfirmButton: true,\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n \r\n\r\n\r\n  const enterHandler = (e) => {\r\n    if (e.key === 'Enter')\r\n      forgotHandler(e)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      < Modal\r\n        visible={visible}\r\n        onCancel={() => { onCancel() }}\r\n        footer={null}\r\n        width='556px'\r\n        className='login-form-forgot'\r\n      >\r\n        <div className='title'>Forgot password ?</div>\r\n        <div className='text-1'>\r\n          Please submit your email to reset password\r\n</div>\r\n        <div className='text-2'>\r\n          Please check your email after submit\r\n</div>\r\n        <Form onSubmit={() => { forgotHandler() }}>\r\n          <Form.Item>\r\n            {getFieldDecorator('email', {\r\n              rules: [\r\n                { required: true, message: 'Vui lòng nhập địa chỉ email' },\r\n                {\r\n                  // eslint-disable-next-line max-len\r\n                  pattern: /^([A-Z|a-z|0-9](\\.|_){0,1})+[A-Z|a-z|0-9]@([A-Z|a-z|0-9])+((\\.){0,1}[A-Z|a-z|0-9]){2}\\.[a-z]{2,3}$/gm,\r\n                  message: 'Địa chỉ email không hợp lệ'\r\n                }\r\n              ]\r\n            })(<Input ref={forgotEmailRef}\r\n              size='large'\r\n              onKeyDown={(e) => { enterHandler(e) }}\r\n            />)}\r\n          </Form.Item>\r\n          <Form.Item>\r\n            <Button\r\n              name='btn-send-request'\r\n              type='primary'\r\n              size='large'\r\n              block\r\n              className='btn-innos'\r\n              onClick={(e) => forgotHandler(e)}\r\n            >\r\n              Send\r\n</Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </Modal >\r\n\r\n    </>\r\n  )\r\n\r\n\r\n}\r\n\r\nconst WrappedNormalForm = Form.create({ name: 'normal' })(Index)\r\nexport default withRouter(WrappedNormalForm)","import React from 'react'\r\nimport {\r\n  Form,\r\n  Input,\r\n  Button,\r\n  Spin\r\n} from 'antd';\r\nimport Swal from 'sweetalert2'\r\nimport { withRouter } from 'react-router-dom'\r\nimport axios from 'axios'\r\n// import css\r\nimport './index.scss'\r\n\r\n\r\nclass RegistrationForm extends React.Component {\r\n  state = {\r\n    confirmDirty: false,\r\n    autoCompleteResult: [],\r\n    loading: false\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    this.props.form.validateFieldsAndScroll((err, values) => {\r\n      if (!err) {\r\n        this.setState({loading: true})\r\n        axios({\r\n          method: 'post',\r\n          url: 'http://localhost:8080/reviewbook/register',\r\n          data: {\r\n            email: values.email,\r\n            password: values.password\r\n          }\r\n        }).then((res) => {\r\n          this.setState({loading: false})\r\n          if (res.data.success) {\r\n            Swal.fire({\r\n              position: 'center',\r\n              type: 'success',\r\n              title: 'Đăng kí thành công !',\r\n              showConfirmButton: false,\r\n              timer: 1000\r\n            })\r\n            this.props.history.push('/login')\r\n          } else {\r\n            Swal.fire({\r\n              position: 'center',\r\n              type: 'error',\r\n              title: res.data,\r\n              showConfirmButton: true,\r\n              timer: 1500\r\n            })\r\n          }\r\n        })\r\n      }\r\n    });\r\n  };\r\n\r\n  handleConfirmBlur = e => {\r\n    const { value } = e.target;\r\n    this.setState({ confirmDirty: this.state.confirmDirty || !!value });\r\n  };\r\n\r\n  compareToFirstPassword = (rule, value, callback) => {\r\n    const { form } = this.props;\r\n    if (value && value !== form.getFieldValue('password')) {\r\n      callback('Two passwords that you enter is inconsistent!');\r\n    } else {\r\n      callback();\r\n    }\r\n  };\r\n\r\n  validateToNextPassword = (rule, value, callback) => {\r\n    const { form } = this.props;\r\n    if (value && this.state.confirmDirty) {\r\n      form.validateFields(['confirm'], { force: true });\r\n    }\r\n    callback();\r\n  };\r\n\r\n  handleWebsiteChange = value => {\r\n    let autoCompleteResult;\r\n    if (!value) {\r\n      autoCompleteResult = [];\r\n    } else {\r\n      autoCompleteResult = ['.com', '.org', '.net'].map(domain => `${value}${domain}`);\r\n    }\r\n    this.setState({ autoCompleteResult });\r\n  };\r\n\r\n  render() {\r\n    const { getFieldDecorator } = this.props.form;\r\n\r\n    const formItemLayout = {\r\n      labelCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 8 },\r\n      },\r\n      wrapperCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 16 },\r\n      },\r\n    };\r\n\r\n\r\n    return (\r\n      <Spin spinning={this.state.loading}>\r\n        <Form {...formItemLayout} onSubmit={this.handleSubmit}>\r\n          <Form.Item label=\"E-mail\" className='registerForm'>\r\n            {getFieldDecorator('email', {\r\n              rules: [\r\n                {\r\n                  type: 'email',\r\n                  message: 'The input is not valid E-mail!',\r\n                },\r\n                {\r\n                  required: true,\r\n                  message: 'Please input your E-mail!',\r\n                },\r\n              ],\r\n            })(<Input />)}\r\n          </Form.Item>\r\n          <Form.Item label=\"Password\" hasFeedback className='registerForm'>\r\n            {getFieldDecorator('password', {\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: 'Please input your password!',\r\n                },\r\n                {\r\n                  validator: this.validateToNextPassword,\r\n                },\r\n              ],\r\n            })(<Input.Password />)}\r\n          </Form.Item>\r\n          <Form.Item label=\"Confirm Password\" hasFeedback className='registerForm'>\r\n            {getFieldDecorator('confirm', {\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: 'Please confirm your password!',\r\n                },\r\n                {\r\n                  validator: this.compareToFirstPassword,\r\n                },\r\n              ],\r\n            })(<Input.Password onBlur={this.handleConfirmBlur} />)}\r\n          </Form.Item>\r\n          <Button type='primary' className='btnRegister' htmlType='submit'>Register</Button>\r\n          <Button className='btnBackLogin' onClick={() => { this.props.backLogin() }}>Back to login</Button>\r\n        </Form>\r\n      </Spin>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nconst WrappedRegistrationForm = Form.create({ name: 'register' })(RegistrationForm);\r\n\r\nexport default withRouter(WrappedRegistrationForm)","\r\nimport React, { useRef, useState } from 'react'\r\nimport { Form, Icon, Input, Button, Checkbox, Modal } from 'antd'\r\nimport Swal from 'sweetalert2'\r\nimport { withRouter } from 'react-router-dom'\r\nimport axios from 'axios'\r\n\r\nimport RegisterForm from './register-form'\r\nimport ForgotForm from './forgot-form'\r\n\r\n// import css\r\nimport './index.scss'\r\n\r\n\r\n\r\nconst Index = (props) => {\r\n\r\n  const emailRef = useRef(null)\r\n  const passwordRef = useRef(null)\r\n  const [forgotForm, setForgotForm] = useState(false)\r\n  const [isLogin, setIsLogin] = useState(true)\r\n\r\n  const registerClick = () => {\r\n    setIsLogin(false)\r\n  }\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault()\r\n    props.form.validateFields((err, values) => {\r\n      if (!err) {\r\n        // props.history.push('/newsFeed')\r\n\r\n        axios({\r\n          method: 'post',\r\n          url: 'http://localhost:8080/reviewbook/login',\r\n          data: {\r\n            email: emailRef.current.state.value,\r\n            password: passwordRef.current.state.value\r\n          }\r\n        }).then(function (res) {\r\n          if (res.data.success) {\r\n            // Swal.fire({\r\n            //   position: 'center',\r\n            //   type: 'success',\r\n            //   title: 'Đăng nhập thành công !',\r\n            //   showConfirmButton: false,\r\n            //   timer: 1500\r\n            // })\r\n            props.history.push('/newsFeed')\r\n          } else {\r\n            Swal.fire({\r\n              position: 'center',\r\n              type: 'error',\r\n              title: res.data,\r\n              showConfirmButton: false,\r\n              timer: 1500\r\n            })\r\n          }\r\n        })\r\n      }\r\n    })\r\n  }\r\n  \r\n  const { getFieldDecorator } = props.form\r\n\r\n  return (\r\n    <div className='container'>\r\n      <div className='form-login'>\r\n        {\r\n          (isLogin) && (\r\n            <>\r\n              <h2 style={{ display: 'block', textAlign: 'center' }}>Login</h2>\r\n              <Form onSubmit={handleSubmit} className=\"login-form\">\r\n                <Form.Item>\r\n                  {getFieldDecorator('username', {\r\n                    rules: [{ required: true, message: 'Please input your email!' }],\r\n                  })(\r\n                    <Input\r\n                      prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                      placeholder=\"Email\"\r\n                      ref={emailRef}\r\n                    />,\r\n                  )}\r\n                </Form.Item>\r\n                <Form.Item>\r\n                  {getFieldDecorator('password', {\r\n                    rules: [{ required: true, message: 'Please input your Password!' }],\r\n                  })(\r\n                    <Input\r\n                      prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                      type=\"password\"\r\n                      placeholder=\"Password\"\r\n                      ref={passwordRef}\r\n                    />,\r\n                  )}\r\n                </Form.Item>\r\n                <Form.Item>\r\n                  {getFieldDecorator('remember', {\r\n                    valuePropName: 'checked',\r\n                    initialValue: true,\r\n                  })(<Checkbox>Remember me</Checkbox>)}\r\n                  <a className=\"forgotBtn\" onClick={() => setForgotForm(true)}>\r\n                    Forgot password\r\n                </a>\r\n                  <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\r\n                    Log in\r\n                  </Button>\r\n                  Or <a onClick={() => { registerClick() }}>register now!</a>\r\n                </Form.Item>\r\n              </Form>\r\n            </>\r\n          )\r\n        }\r\n        {\r\n          (!isLogin) && (\r\n            <>\r\n              <h2 style={{ display: 'block', textAlign: 'center' }}>Register</h2>\r\n              <RegisterForm backLogin={() => setIsLogin(true)} />\r\n            </>\r\n          )\r\n        }\r\n\r\n        <ForgotForm onCancel={() => setForgotForm(false)} visible={forgotForm}/>\r\n\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst WrappedNormalLoginForm = Form.create({ name: 'normal_login' })(Index)\r\nexport default withRouter(WrappedNormalLoginForm)\r\n"],"sourceRoot":""}